# Optimized Multi-stage Dockerfile for Food Analyzer Backend
# Stage 1: Build TypeScript backend
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci

# Copy source code
COPY . .

# Build TypeScript to JavaScript
RUN npm run build

# Stage 2: Python dependencies (minimal)
FROM python:3.11-slim AS python-deps

WORKDIR /app

# Install only essential system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libgl1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python requirements
COPY python_models/requirements.txt ./python_models/

# Install only essential Python dependencies
RUN pip install --no-cache-dir \
    torch \
    torchvision \
    --index-url https://download.pytorch.org/whl/cpu \
    && pip install --no-cache-dir \
    transformers \
    ultralytics \
    Pillow \
    numpy \
    opencv-python \
    requests \
    tqdm \
    && rm -rf ~/.cache/pip

# Stage 3: Production image (optimized)
FROM debian:bookworm-slim AS production

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install only essential packages
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    ca-certificates \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y \
    nodejs \
    python3 \
    python3-pip \
    python3-dev \
    gcc \
    g++ \
    libgl1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    && npm install -g npm@10.8.2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create app directory
WORKDIR /app

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy Python dependencies from python-deps stage
COPY --from=python-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3/site-packages
COPY --from=python-deps /usr/local/bin /usr/local/bin

# Copy package files and install production Node.js dependencies
COPY package*.json ./
RUN npm ci --omit=dev --ignore-scripts \
    && npm rebuild sharp --platform=linux --arch=arm64v8 \
    && npm cache clean --force \
    && rm -rf ~/.npm

# Copy built TypeScript backend
COPY --from=builder /app/dist ./dist

# Copy only essential Python files
COPY python_models/detect_food.py ./python_models/
COPY python_models/color_analysis.py ./python_models/
COPY yolo11m.pt ./python_models/

# Remove unnecessary files
RUN find /app -name "*.pyc" -delete \
    && find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true \
    && find /app -name "*.log" -delete \
    && find /app -name ".DS_Store" -delete

# Set proper permissions
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE $PORT

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# Start the application
CMD ["node", "dist/server.js"]
